#pragma kernel ReadFFT
#pragma kernel BitReverseTextureX
#pragma kernel BitReverseTextureY
#pragma kernel InitializeTexture
#pragma kernel ShiftTexture
#pragma kernel HorizontalButterflyPass
#pragma kernel VerticalButterflyPass

Texture2D<float4> _InputTexture;
RWTexture2D<float4> _Pong0Texture;
RWTexture2D<float4> _Pong1Texture;
RWBuffer<int> _BitReversed;

static const float PI = 3.14159265;

int N;
float _Time;
int _Dir;

#include "../Complex.compute"

[numthreads(8, 8, 1)]
void InitializeTexture(uint3 id : SV_DispatchThreadID) {
	float4 c = _InputTexture[id.xy];
	
	if (_Dir == 1) {
		c.g = 0;
	}

	_Pong0Texture[id.xy] = c;
	_Pong1Texture[id.xy] = c;
}

void InversionPermutation(float2 id) {
	float perms[] = { 1.0, -1.0 };

	int index = (int)((id.x + id.x * id.y) % 2);
	float perm = perms[index];

	float NSquared = pow(N, 2);

	float h = _Pong0Texture[id.xy].r;
	float hVal = perm * (h / NSquared);

	_Pong0Texture[id.xy] = float4(hVal, hVal, hVal, 1);
}

[numthreads(1, 1, 1)]
void HorizontalButterflyPass(uint3 id : SV_DispatchThreadID) {
	int log2N = log2(N);

	for (int s = 1; s <= log2N; s++)
	{
		int m = pow(2, s);

		float exp = (_Dir * -2.0 * PI) / (float)m;

		Complex wm;
		wm.real = cos(exp);
		wm.im = sin(exp);

		for (int k = 0; k <= N - 1; k += m)
		{
			Complex w;
			w.real = 1;
			w.im = 0;

			for (int j = 0; j <= (m / 2) - 1; j++)
			{
				Complex something;
				something.real = _Pong1Texture[float2(k + j + (m / 2), id.x)].r;
				something.im = _Pong1Texture[float2(k + j + (m / 2), id.x)].g;

				Complex t = Mul(w, something);
				Complex u;
				u.real = _Pong1Texture[float2(k + j, id.x)].r;
				u.im = _Pong1Texture[float2(k + j, id.x)].g;

				Complex added = Add(u, t);
				Complex subbed = Sub(u, t);

				_Pong1Texture[float2(k + j, id.x)].rgba = float4(added.real, added.im, 0, 1);
				_Pong1Texture[float2(k + j + (m / 2), id.x)].rgba = float4(subbed.real, subbed.im, 0, 1);
				w = Mul(w, wm);
			}
		}
	}

	for (int i = 0; i < N; i++) {
		_Pong1Texture[float2(i, id.x)].rgba *= float4(1.0 / N, 1.0 / N, 1, 1);
	}
}

[numthreads(1, 1, 1)]
void VerticalButterflyPass(uint3 id : SV_DispatchThreadID) {
	int log2N = log2(N);

	for (int s = 1; s <= log2N; s++)
	{
		int m = pow(2, s);

		float exp = (_Dir * -2.0 * PI) / (float)m;

		Complex wm;
		wm.real = cos(exp);
		wm.im = sin(exp);

		for (int k = 0; k <= N - 1; k += m)
		{
			Complex w;
			w.real = 1;
			w.im = 0;

			for (int j = 0; j <= (m / 2) - 1; j++)
			{
				Complex something;
				something.real = _Pong0Texture[float2(id.x, k + j + (m / 2))].r;
				something.im = _Pong0Texture[float2(id.x, k + j + (m / 2))].g;

				Complex t = Mul(w, something);
				Complex u;
				u.real = _Pong0Texture[float2(id.x, k + j)].r;
				u.im = _Pong0Texture[float2(id.x, k + j)].g;

				Complex added = Add(u, t);
				Complex subbed = Sub(u, t);

				_Pong0Texture[float2(id.x, k + j)].rgba = float4(added.real, added.im, 0, 1);
				_Pong0Texture[float2(id.x, k + j + (m / 2))].rgba = float4(subbed.real, subbed.im, 0, 1);
				w = Mul(w, wm);
			}
		}
	}

	for (int i = 0; i < N; i++) {
		_Pong0Texture[float2(id.x, i)].rgba *= float4(1.0 / N, 1.0 / N, 1, 1);
	}
}

[numthreads(1, 1, 1)]
void BitReverseTextureX(uint3 id : SV_DispatchThreadID) {
	for (int i = 0; i < N; i++) {
		float2 curIndex = float2(i, id.x);
		float2 freqIndex = float2(_BitReversed[i], id.x);

		float4 c = _Pong0Texture[freqIndex].rgba;

		_Pong1Texture[curIndex].rgba = c;
	}
}

[numthreads(1, 1, 1)]
void BitReverseTextureY(uint3 id : SV_DispatchThreadID) {
	for (int i = 0; i < N; i++) {
		float2 curIndex = float2(id.x, i);
		float2 freqIndex = float2(id.x, _BitReversed[i]);

		float4 c = _Pong1Texture[freqIndex].rgba;

		_Pong0Texture[curIndex].rgba = c;
	}
}

[numthreads(8, 8, 1)]
void ReadFFT(uint3 id : SV_DispatchThreadID) {
	float2 amp = _Pong0Texture[id.xy].rg;
	
	float mag = sqrt(amp.r * amp.r + amp.g * amp.g);

	_Pong0Texture[id.xy] = float4(mag, mag, mag, 1);
}

[numthreads(1, 1, 1)]
void ShiftTexture(uint3 id : SV_DispatchThreadID) {
	float2 shiftUV = float2(
		(id.x + N / 2) % N,
		(id.y + N / 2) % N
		);

	float4 c = _Pong0Texture[id.xy].rgba;
	float4 c2 = _Pong0Texture[shiftUV].rgba;

	_Pong0Texture[shiftUV] = c;
	_Pong0Texture[id.xy] = c2;
}