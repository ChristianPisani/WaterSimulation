#pragma kernel GenerateWaveTexture
#pragma kernel DFT
#pragma kernel Vertical
#pragma kernel FFT
#pragma kernel HorizontalFFT
#pragma kernel VerticalFFT
#pragma kernel ReadFFT
#pragma kernel BitReverseTextureX
#pragma kernel BitReverseTextureY
#pragma kernel InitializeFrequencyTexture
#pragma kernel ShiftTexture
#pragma kernel Butterfly
#pragma kernel HorizontalButterflyPass
#pragma kernel VerticalButterflyPass

Texture2D<float4> _Input;
RWTexture2D<float4> _WaveTexture;
RWTexture2D<float4> _InitialTexture;
RWTexture2D<float4> _FrequencyTexture;
RWBuffer<int> BitReversed;

RWTexture2D<float4> ButterflyTexture;
RWTexture2D<float4> Pong0Texture;
RWTexture2D<float4> Pong1Texture;

static const float PI = 3.14159265;

float _Rotation;
float _Frequency;
float2 _Strength;

float _Time;
int _Resolution;

RWTexture2D<float4> DisplacementTexture;

#include "../Complex.compute"

[numthreads(8, 8, 1)]
void GenerateWaveTexture(uint3 id : SV_DispatchThreadID)
{
	float2 pos = float2(
		id.x * sin(_Rotation) - id.y * cos(_Rotation),
		id.x * cos(_Rotation) + id.y * sin(_Rotation)
		);

	float f = _Frequency;

	float ramp = sin(_Rotation * PI / 180.0) * id.x - cos(_Rotation * PI / 180.0) * id.y;
	float ramp2 = cos(90.0 + _Rotation * PI / 180.0) * id.x - sin(90.0 + _Rotation * PI / 180.0) * id.y;
	float sineSample = sin(2.0 * PI * _Frequency * ramp);

	_WaveTexture[id.xy] = float4(sineSample, sineSample, sineSample, 1);
}

[numthreads(8, 8, 1)]
void DFT(uint3 id : SV_DispatchThreadID)
{
	int N = _Resolution;

	Complex sum;
	sum.real = 0;
	sum.im = 0;

	int k = id.x;

	for (int n = 0; n < N - 1; n++) {
		Complex amp;
		amp.real = _Input[float2(n, k)].r;
		amp.im = 0;

		Complex euler;

		float angle = ((2.0 * PI) / N) * k * n;

		euler.real = cos(angle);
		euler.im = -sin(angle);

		sum = Add(sum, Mul(amp, euler));
	}

	_FrequencyTexture[id.xy].rgba = float4(sum.real, sum.im, 0, 1);
}

[numthreads(8, 8, 1)]
void Vertical(uint3 id : SV_DispatchThreadID)
{
	int N = _Resolution;

	Complex sum;
	sum.real = _FrequencyTexture[id.xy].r;
	sum.im = _FrequencyTexture[id.xy].g;

	int k = id.y;

	for (int n = 0; n < N - 1; n++) {
		Complex amp;
		amp.real = _FrequencyTexture[float2(k, n)].r;
		amp.im = _FrequencyTexture[float2(k, n)].g;

		Complex euler;

		float angle = ((2.0 * PI) / N) * k * n;

		euler.real = cos(angle);
		euler.im = -sin(angle);

		sum = Add(sum, Mul(amp, euler));
	}

	float a = sqrt(sum.real * sum.real + sum.im * sum.im) / N;

	_FrequencyTexture[id.xy] = float4(sum.real, sum.im, a, 1);
}

[numthreads(8, 8, 1)]
void FFT(uint3 id : SV_DispatchThreadID)
{
	int N = _Resolution;

	int ldn = log(N);
	int n = ldn * 2;

	for (int ldm = 1; ldm < n; ldm++) {
		float m = 2 * ldm;
		float mh = m / 2;

		for (int r = 0; r <= n - m; r += m) {
			for (int j = 0; j <= mh - 1; j++) {
				Complex e;

				int dir = -1;
				float angle = (dir * 2 * PI  * j) / m;

				e.real = cos(angle);
				e.im = -sin(angle);

				Complex u;
				float2 evenIndex = float2(BitReversed[r + j], 0);

				u.real = _WaveTexture[evenIndex].r;
				u.im = 0;
				Complex v;
				float2 oddIndex = float2(BitReversed[r + j + mh], 0);

				v.real = _WaveTexture[evenIndex].r;
				v.im = 0;

				Complex uvAdd = Add(u, v);
				Complex uvSub = Sub(u, v);

				_FrequencyTexture[evenIndex] = float4(uvAdd.real, uvAdd.im, 0, 1);
				_FrequencyTexture[oddIndex] = float4(uvSub.real, uvSub.im, 0, 1);
			}
		}
	}
}

[numthreads(8, 8, 1)]
void Butterfly(uint3 id : SV_DispatchThreadID) {
	int N = log2(_Resolution);

	int stage = id.x + 1;
	int butterflySpan = (int)pow(2, stage);

	float k = id.y * (float)((float)N / pow(2, stage));

	Complex twiddle;
	twiddle.real = cos(2.0 * PI * k / (float)N);
	twiddle.im = -sin(2.0 * PI * k / (float)N);

	int butterflyWing = 0;

	if (id.y % butterflySpan < (butterflySpan / 2)) {
		butterflyWing = 1;
	}

	if (stage == 1) {
		if (butterflyWing == 1) {
			ButterflyTexture[id.xy] = float4(twiddle.real, twiddle.im, BitReversed[id.y], BitReversed[id.y + (butterflySpan / 2)]);
		}
		else {
			ButterflyTexture[id.xy] = float4(twiddle.real, twiddle.im, BitReversed[id.y], BitReversed[id.y - (butterflySpan / 2)]);
		}
	}
	else {
		if (butterflyWing = 1) {
			ButterflyTexture[id.xy] = float4(twiddle.real, twiddle.im, id.y, id.y + (butterflySpan / 2));
		}
		else {
			ButterflyTexture[id.xy] = float4(twiddle.real, twiddle.im, id.y, id.y - (butterflySpan / 2));
		}
	}
}

[numthreads(8, 1, 1)]
void HorizontalButterflyPass(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	int log2N = log2(N);
	
	for (int s = 1; s <= log2N; s++)
	{
		int m = pow(2, s);

		float exp = (2.0 * PI) / m;

		Complex wm;
		wm.real = cos(exp);
		wm.im = -sin(exp);

		for (int k = 0; k <= N - 1; k += m)
		{
			Complex w;
			w.real = 1;
			w.im = 0;

			for (int j = 0; j <= (m / 2) - 1; j++)
			{
				Complex something;
				something.real = Pong0Texture[float2(k + j + (m / 2), id.x)].r;
				something.im = Pong0Texture[float2(k + j + (m / 2), id.x)].g;

				Complex t = Mul(w, something);
				Complex u;
				u.real = Pong0Texture[float2(k + j, id.x)].r;
				u.im = Pong0Texture[float2(k + j, id.x)].g;

				Complex added = Add(u, t);
				Complex subbed = Sub(u, t);

				Pong0Texture[float2(k + j, id.x)].rgba = float4(added.real, added.im, 0, 1);
				Pong0Texture[float2(k + j + (m / 2), id.x)].rgba = float4(subbed.real, subbed.im, 0, 1);
				w = Mul(w, wm);
			}
		}
	}
}

[numthreads(8, 1, 1)]
void VerticalButterflyPass(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	int log2N = log2(N);
	
	for (int s = 1; s <= log2N; s++)
	{
		int m = pow(2, s);

		float exp = (2.0 * PI) / m;

		Complex wm;
		wm.real = cos(exp);
		wm.im = -sin(exp);

		for (int k = 0; k <= N - 1; k += m)
		{
			Complex w;
			w.real = 1;
			w.im = 0;

			for (int j = 0; j <= (m / 2) - 1; j++)
			{
				Complex something;
				something.real = Pong0Texture[float2(id.x, k + j + (m / 2))].r;
				something.im = Pong0Texture[float2(id.x, k + j + (m / 2))].g;

				Complex t = Mul(w, something);
				Complex u;
				u.real = Pong0Texture[float2(id.x, k + j)].r;
				u.im = Pong0Texture[float2(id.x, k + j)].g;

				Complex added = Add(u, t);
				Complex subbed = Sub(u, t);

				Pong0Texture[float2(id.x, k + j)].rgba = float4(added.real, added.im, 0, 1);
				Pong0Texture[float2(id.x, k + j + (m / 2))].rgba = float4(subbed.real, subbed.im, 0, 1);
				w = Mul(w, wm);
			}
		}
	}
}

[numthreads(1, 1, 1)]
void ButterflyFFT(uint3 id : SV_DispatchThreadID) {
	// Does not work in current state

	// For each row in image 0..N (id.x) (naturally would be id.y, but only create threads per row)
	// For each value in row 0...N (int i)
	// Prepare complex sum value
	// Perform butterfly operation 0..log2(N) (summation of twiddle indices)
	// // Fetch top index and bottom index values - Tex[i, id.x].ba
	// // If top
	// // // sum += top + bottom
	// // If bottom
	// // // Twiddle = bottom.rg
	// // // sum += top - (bottom * twiddle)
	// // Tex[i, id.x] = sum

	int N = _Resolution;

	int log2N = log2(N);
	int pingpong = 0;

	for (int n = 0; n < 2; n++) {
		int stage = n + 1;
		int butterflySpan = (int)pow(2, stage);

		for (int i = 0; i < N; i++) {
			int butterflyWing = 0;

			if (i % butterflySpan < (butterflySpan / 2)) {
				butterflyWing = 1;
			}

			Complex sum;
			sum.real = 0;
			sum.im = 0;

			Complex top;
			Complex bottom;

			float2 butterflyIndex = float2(n, i);
			float4 butterfly = ButterflyTexture[butterflyIndex].rgba;

			// b and a are indices for pixel values to compare
			int topIndex = (int)(butterfly.b);
			int bottomIndex = (int)(butterfly.a);

			if (pingpong % 2 == 0) {
				top.real = Pong0Texture[float2(topIndex, id.x)].r;
				top.im = Pong0Texture[float2(topIndex, id.x)].g;

				bottom.real = Pong0Texture[float2(bottomIndex, id.x)].r;
				bottom.im = Pong0Texture[float2(bottomIndex, id.x)].g;
			}
			else {
				top.real = Pong0Texture[float2(topIndex, id.x)].r;
				top.im = Pong0Texture[float2(topIndex, id.x)].g;

				bottom.real = Pong1Texture[float2(bottomIndex, id.x)].r;
				bottom.im = Pong1Texture[float2(bottomIndex, id.x)].g;
			}

			if (butterflyWing == 0) {
				float2 butterflyTopIndex = float2(n, topIndex);
				float4 butterflyTop = ButterflyTexture[butterflyTopIndex].rgba;

				Complex twiddle;
				twiddle.real = butterflyTop.r;
				twiddle.im = butterflyTop.g;

				Complex mul = Mul(twiddle, bottom);

				Complex add = Add(top, mul);
				sum = Add(sum, add);
			}
			else {
				float2 butterflyBottomIndex = float2(n, bottomIndex);
				float4 butterflyBottom = ButterflyTexture[butterflyBottomIndex].rgba;

				Complex twiddle;
				twiddle.real = butterflyBottom.r;
				twiddle.im = butterflyBottom.g;

				Complex mul = Mul(twiddle, bottom);


				Complex sub = Sub(top, mul);
				sum = Add(sum, sub);
			}

			if (pingpong % 2 == 0) {
				Pong1Texture[float2(i, id.x)].rgba = float4(sum.real, sum.im, 0, 1);
			}
			else {
				Pong0Texture[float2(i, id.x)].rgba = float4(sum.real, sum.im, 0, 1);
			}

		}

		pingpong++;
	}
}

[numthreads(8, 8, 1)]
void InitializeFrequencyTexture(uint3 id : SV_DispatchThreadID) {
	float4 c = _Input[id.xy];
	c.g = 0;

	_InitialTexture[id.xy] = c;
	_FrequencyTexture[id.xy] = c;
}

[numthreads(1, 1, 1)]
void BitReverseTextureY(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	for (int i = 0; i < N; i++) {
		float2 curIndex = float2(id.x, i);
		float2 freqIndex = float2(id.x, BitReversed[i]);

		float4 c = _InitialTexture[freqIndex].rgba;

		_FrequencyTexture[curIndex].rgba = c;
	}

	for (int i = 0; i < N; i++) {
		//_InitialTexture[float2(id.x, i)].rgba = _FrequencyTexture[float2(id.x, i)];
	}
}

[numthreads(1, 1, 1)]
void BitReverseTextureX(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	for (int i = 0; i < N; i++) {
		float2 curIndex = float2(i, id.x);
		float2 freqIndex = float2(BitReversed[i], id.x);

		float4 c = _InitialTexture[freqIndex].rgba;

		_FrequencyTexture[curIndex].rgba = c;
	}

	for (int i = 0; i < N; i++) {
		//_InitialTexture[float2(i, id.x)].rgba = _FrequencyTexture[float2(i, id.x)];
	}
}


[numthreads(1, 1, 1)]
void VerticalFFT(uint3 id : SV_DispatchThreadID)
{
	int n = _Resolution;
	int Dir = 1;

	for (int s = 1; s <= log2(n); s++)
	{
		int n = _Resolution;
		int Dir = 1;

		for (int s = 1; s <= log2(n); s++)
		{
			int m = pow(2, s);

			Complex wm;
			wm.real = 0;
			wm.im = (-Dir * 2.0 * PI) / (float)m;

			wm.real = cos(wm.real);
			wm.im = sin(wm.im);

			for (int k = 0; k <= n - 1; k += m)
			{
				Complex w;
				w.real = 1;
				w.im = 0;

				for (int j = 0; j <= (m / 2) - 1; j++)
				{
					int evenIndex = k + j + (m / 2);
					int oddIndex = k + j;

					Complex c1;
					c1.real = _FrequencyTexture[float2(id.x, evenIndex)].r * 2.0 - 1.0;
					c1.im = _FrequencyTexture[float2(id.x, evenIndex)].g * 2.0 - 1.0;

					Complex u;
					u.real = _FrequencyTexture[float2(id.x, oddIndex)].r * 2.0 - 1.0;
					u.im = _FrequencyTexture[float2(id.x, oddIndex)].g * 2.0 - 1.0;

					Complex t = Mul(w, c1);

					Complex added = Add(u, t);
					Complex subbed = Sub(u, t);

					_FrequencyTexture[float2(id.x, oddIndex)].rgba = float4((added.real + 1.0) / 2.0, (added.im + 1.0) / 2.0, 0, 1);
					_FrequencyTexture[float2(id.x, evenIndex)].rgba = float4((subbed.real + 1.0) / 2.0, (subbed.im + 1.0) / 2.0, 0, 1);
					w = Mul(w, wm);
				}
			}
		}
	}

	for (int i = 0; i < n; i++) {
		_InitialTexture[float2(id.x, i)].rgba = _FrequencyTexture[float2(id.x, i)];
	}
}

[numthreads(1, 1, 1)]
void HorizontalFFT(uint3 id : SV_DispatchThreadID)
{
	int n = _Resolution;
	int Dir = 1;

	for (int s = 1; s <= log2(n); s++)
	{
		int m = pow(2, s);

		Complex wm;
		wm.real = 0;
		wm.im = (-Dir * 2.0 * PI) / (float)m;

		wm.real = cos(wm.real);
		wm.im = sin(wm.im);

		for (int k = 0; k <= n - 1; k += m)
		{
			Complex w;
			w.real = 1;
			w.im = 0;

			for (int j = 0; j <= (m / 2) - 1; j++)
			{
				int evenIndex = k + j + (m / 2);
				int oddIndex = k + j;

				Complex c1;
				c1.real = _FrequencyTexture[float2(evenIndex, id.x)].r * 2.0 - 1.0;
				c1.im = _FrequencyTexture[float2(evenIndex, id.x)].g * 2.0 - 1.0;

				Complex u;
				u.real = _FrequencyTexture[float2(oddIndex, id.x)].r * 2.0 - 1.0;
				u.im = _FrequencyTexture[float2(oddIndex, id.x)].g * 2.0 - 1.0;

				Complex t = Mul(w, c1);

				Complex added = Add(u, t);
				Complex subbed = Sub(u, t);

				_FrequencyTexture[float2(oddIndex, id.x)].rgba = float4((added.real + 1.0) / 2.0, (added.im + 1.0) / 2.0, 0, 1);
				_FrequencyTexture[float2(evenIndex, id.x)].rgba = float4((subbed.real + 1.0) / 2.0, (subbed.im + 1.0) / 2.0, 0, 1);
				w = Mul(w, wm);
			}
		}
	}

	for (int i = 0; i < n; i++) {
		_InitialTexture[float2(i, id.x)].rgba = _FrequencyTexture[float2(i, id.x)];
	}
}

[numthreads(8, 8, 1)]
void ReadFFT(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	float2 amp = _FrequencyTexture[id.xy].rg / (float)N;
	//amp.r = log(1.0 + amp.r);
	//amp.g = log(1.0 + amp.g);

	float constant = N * 10;
	//float mag = log(1.0 + sqrt(amp.r * amp.r + amp.g * amp.g) * constant) / log(1.0 + constant);
	//float mag = log(1 + sqrt(amp.r * amp.r + amp.g * amp.g));
	float mag = sqrt(amp.r * amp.r + amp.g * amp.g);

	_FrequencyTexture[id.xy] = float4(mag, mag, mag, 1);
}

[numthreads(1, 1, 1)]
void ShiftTexture(uint3 id : SV_DispatchThreadID) {
	int N = _Resolution;

	float2 shiftUV = float2(
		(id.x + N / 2) % N,
		(id.y + N / 2) % N
		);

	float4 c = _FrequencyTexture[id.xy].rgba;
	float4 c2 = _FrequencyTexture[shiftUV].rgba;

	_FrequencyTexture[shiftUV] = c;
	_FrequencyTexture[id.xy] = c2;
}